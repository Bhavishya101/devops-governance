# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: DEV Environment POC
on:
  push:
    branches:
      - dev-poc
env:
  STATE_BUCKET: ${{ secrets.STATE_BUCKET }}
  workload_identity_provider: 'projects/110275740506/locations/global/workloadIdentityPools/github-pool/providers/github'
  service_account: 'dev-service-account@devops-governance-dev.iam.gserviceaccount.com'
  TF_VAR_project: ' devops-governance-dev'

jobs:
  # Validate
  validate:
    # The type of runner that the job will run on
    runs-on: self-hosted
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: 'actions/checkout@v2'

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ env.workload_identity_provider }}
        service_account: ${{ env.service_account }}
        access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)

    - run: |-
        cd ./examples/poc/
        terraform init \
          -var "access_token=${{ steps.auth.outputs.access_token }}" \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="prefix=$GITHUB_REPOSITORY" \
        terraform validate
  
  # Plan
  plan:
    needs: validate
    # The type of runner that the job will run on
    runs-on: self-hosted
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: 'actions/checkout@v2'

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ env.workload_identity_provider }}
        service_account: ${{ env.service_account }}
        access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)

    - run: |-
        cd ./examples/poc/
        terraform init \
          -var "access_token=${{ steps.auth.outputs.access_token }}" \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="prefix=$GITHUB_REPOSITORY" \
        terraform plan -var "access_token=${{ steps.auth.outputs.access_token }}" -out tfplan.plan
    - name: 'Save Plan'
      uses: actions/upload-artifact@v2
      with:
        name: tfplan.plan
        path: tfplan.plan

  # Deploy
  deploy:
    needs: plan
    # The type of runner that the job will run on
    runs-on: self-hosted
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: 'actions/checkout@v2'

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ env.workload_identity_provider }}
        service_account: ${{ env.service_account }}
        access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)

    - uses: actions/download-artifact@v2
      with:
        name: tfplan.plan

    - run: |-
        cd ./examples/poc/
        terraform init \
          -var "access_token=${{ steps.auth.outputs.access_token }}" \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="prefix=$GITHUB_REPOSITORY" \
        terraform apply -auto-approve tfplan.plan
